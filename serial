#!/usr/bin/env ruby 

=begin

This simple script helps to quickly connect to a serial tty.
It holds some default baud-rates and uses smart default values.
The serial connection itself works using screen.

Copyright (c) 2014 Niclas Hirschfeld
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
=end

# default baud-rates with describtion
bauds = { 	9600	=> "often arduino", 
			115200	=> "cubieboard, buspirate" 
		}

# get all devices
devices = Dir.glob("/dev/tty.*")

# select device
puts "Select Device to connect:"
default = 0
devices.each_with_index {|device, index|
	puts "[#{index}] #{device.split('/').last}"
	if device.include? "usb"
		default = index
	end
}
print "(default = #{default}) > "
/^(?<input>\d+)$/ =~ gets
if input
	device = devices[input.to_i]
else
	device = devices[default]
end

# select baud
bauds.each_with_index { |(rate,desc),index|
	puts "[#{index}] #{rate} - #{desc}"
}
print "(default = #{bauds.length-1}) > "
/^(?<input>\d+)$/ =~ gets
if input
	baud = bauds.keys[input.to_i]
else
	baud = bauds.keys[bauds.length-1]
end

exec "screen #{device} #{baud} && reset"
